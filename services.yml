Description: >
  Felix Geelhaar / Udacity Project 2
  This template defines the services layer

Parameters:
  EnvironmentName:
    Description: An environment name that will be prefixed to resources
    Type: String

Resources:
  LBSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to the Loadbalancer
      VpcId:
        Fn::ImportValue: !Sub ${EnvironmentName}-VPCID
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  WebServerSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to the hosts and ssh from local only
      VpcId:
        Fn::ImportValue: !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0

  # ProfileWithRolesForOurApp:
  #   Type: AWS::IAM::InstanceProfile
  #   Properties:
  #     Roles:
  #       - UdacityS3ReadOnlyEC2

  WebServerLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          apt-get update -y
          apt-get install apache2 -y
          systemctl start apache2.service
          cd /var/www/html
          echo "Udacity Demo Web Server Up and Running!" > index.html
      ImageId: ami-005bdb005fb00e791
      # IamInstanceProfile: !Ref ProfileWithRolesForOurApp
      KeyName: private-servers
      SecurityGroups:
        - Ref: WebServerSecGroup
      InstanceType: t2.small
      BlockDeviceMappings:
        - DeviceName: "/dev/sdk"
          Ebs:
            VolumeSize: "10"

  WebServiceAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - Fn::ImportValue: !Sub ${EnvironmentName}-PRIV-NETS
      LaunchConfigurationName:
        Ref: WebServerLaunchConfig
      MinSize: "3"
      MaxSize: "5"
      TargetGroupARNs:
        - Ref: WebServerTargetGroup

  WebServerLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
        - Fn::ImportValue: !Sub ${EnvironmentName}-PUB1-SN
        - Fn::ImportValue: !Sub ${EnvironmentName}-PUB2-SN
      SecurityGroups:
        - Ref: LBSecGroup

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn:
            Ref: WebServerTargetGroup
      LoadBalancerArn:
        Ref: WebServerLoadBalancer
      Port: 80
      Protocol: HTTP

  ApplicationLoadBalancerListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref WebServerTargetGroup
      Conditions:
        - Field: path-pattern
          Values: [/]
      ListenerArn: !Ref Listener
      Priority: 1

  WebServerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Port: 8080
      Protocol: HTTP
      UnhealthyThresholdCount: 3
      VpcId:
        Fn::ImportValue: !Sub ${EnvironmentName}-VPCID

Outputs:
  LoadBalancerDNSEntry:
    Description: DNS Entry for reaching the LoadBalancer
    Value: !GetAttr WebServerLoadBalancer.DNSName
